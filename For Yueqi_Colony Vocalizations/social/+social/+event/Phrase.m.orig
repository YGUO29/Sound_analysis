classdef Phrase < social.interface.Event & social.signal.StandardVocalSignal
    % Event interface defines methods and properties that events must have.
    % An event must have a start time, a stop time, and a sync time (all in
    % seconds relative to the event sync time). Events subclass
    % dynamicprops to allow addition or removal of properties.
    
    properties
        eventF0
        eventPower
        SubjectID
        BehChannel
        % DECLARED IN social.signal.StandardVocalSignal
        %Header      % Returned from audioinfo
        %Channel     % Channel in referenced file.
        %Mic         % MicType object describing mic.
        %SampleRate  % DECLARED IN social.interface.AnalogSignal

    end
    
    methods
        function self = Phrase(varargin)
                % Construct an analog event using
                % Event(source_signal,start,stop[,sync,propstruct])
                p=inputParser;
                p.addOptional('signal',[]);
                p.addOptional('start',[]);
                p.addOptional('stop',[]);
                
                p.addOptional('BehChannel',[]);
                p.addOptional('sync',0);
                p.parse(varargin{:})
                signal=p.Results.signal; start=p.Results.start; stop=p.Results.stop;
                sync=p.Results.sync;
                
                % If phrase is longer that 10 seconds, there's something wrong.
                %  Throw it out by returning self=NaN;
                if (stop-start)>10
                    stop=[];
                    start=[];
                end
                if ~isempty(signal)
                    file=signal.File;
                    name=signal.Name;
                    channel=signal.Channel;
                else
                    file=[];name=[];channel=[];
                end
                self=self@social.interface.Event(start,stop,varargin);
                self=self@social.signal.StandardVocalSignal(file,name,channel);
<<<<<<< local
                if ~isempty(signal)
                    self.SessionID=signal.SessionID;
                end
=======
                self.SessionID = signal.SessionID;
                self.BehChannel = p.Results.BehChannel;
                self.SubjectID = p.Results.BehChannel.SubjectID;
>>>>>>> other
                
                % Get phrase properties
                %             self.eventPower=self.get_f0;
                %             self.eventF0=self.get_power;
                
                % To allow easy filtering of events in Heterogenous event
                % arrays, set the eventType property to a string corresponding
                % to the name of the class.
                if nargin>0
                    self.eventClass='Phrase';
                else
                    self.eventClass='Empty';
                end
        end
        function sig=get_signal(self,varargin)
            if nargin>1
                times=varargin{1};
            else
                times=[self.eventStartTime self.eventStopTime];
            end
            sig = get_signal@social.signal.StandardVocalSignal(self,times);
        end
        function f0data=get_f0(self)
            try
                sig=cell2mat(self.get_signal);
                f0data=social.analysis.GetPheeF0(sig,self.SampleRate);
            catch
                f0data.time=[];
                f0data.f0=[];
                f0data.energy=[];
            end
        end
        function powerdata=get_power(self)
            try
                sig=cell2mat(self.get_signal);
                powerdata=social.analysis.GetPheePower(sig,self.SampleRate);
            catch
                powerdata.time=[];
                powerdata.power=[];
            end
        end
%         function value = get.eventF0(self)
%             value=self.get_f0;
%         end
%         function value = get.eventPower(self);
%             value=self.get_power;
%         end

        %%% Set eventStartTime and eventStopTime methods
%         function set.eventStartTime(self,value)
% %             if value~=self.eventStartTime
%                 self.eventStartTime=value;
%                 self.eventPower=self.get_f0;
%                 self.eventF0=self.get_power;
% %             end
%         end
%         function set.eventStopTime(self,value)
% %             if value~=self.eventStartTime
%                 self.eventStopTime=value;
%                 self.eventPower=self.get_f0;
%                 self.eventF0=self.get_power;
% %             end
%         end

% TODO: Other things to consider.
% function SaveEvent(filename)
%             save(filename,self);
%         end
%         
%         function LoadEvent
%         end
%         
%         function ReturnEventID
%         end
%             
    end
%     methods(Sealed=true)
%         function varargout = findobj(self,varargin)
% %             if nargout == 0
% %                 builtin('findobj',varargin{:});
% %             else
%                 varargout{:} = builtin('findobj',self,varargin{:});
% %             end
%         end
%     end

end

